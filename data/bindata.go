// Code generated by go-bindata.
// sources:
// data/map.txt
// DO NOT EDIT!

package data

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dataMapTxt = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x54\x56\xbb\x6e\xe3\x30\x10\xec\x03\xe4\x1f\x02\x5c\xcb\x9f\xa0\x6d\xc6\x16\x2c\x51\x02\x25\x5a\x30\xc0\xce\xfd\x35\xf9\x7f\xe0\x66\x66\x97\x72\xae\x49\xac\x9d\xd9\x17\xb9\x0f\xfe\xf9\x4a\xf9\x3a\xc6\x7c\xf9\xfc\x18\x5b\x6e\x7b\x1c\xdb\x38\xe7\x30\x3e\x96\xf0\x9c\xcb\xe7\xc7\xee\xc2\xa1\x0c\x01\x4c\x01\x20\x18\xfb\x3c\x3e\x5b\xba\x0c\x14\x1a\xf3\x97\x20\xe4\xb8\x85\x5c\xae\x64\x3e\x1b\x04\x0d\xf6\x02\x41\x90\x02\x4c\x52\xc3\x00\xda\x26\xfb\x00\xa8\x01\xa6\x34\x68\x0a\x80\xb1\x29\xcc\xdb\x8d\x76\x19\x9e\x01\x8c\x04\x1f\x34\x45\x75\x86\x47\x3f\x16\x11\x01\x45\x04\x21\x34\x3d\x9a\x59\x49\xf5\x0c\x4d\xc0\xec\x68\xfb\x00\x3e\x3f\xfe\x7c\x7d\x97\x98\xcf\xc9\xb4\xa6\x58\xda\x32\xa4\x70\xaa\x25\x5c\xe3\x1a\xd6\x25\x9b\x76\x07\xae\xf3\x48\xe1\xcf\xcb\x62\x02\xa7\x9d\x4a\x0a\x4b\x2c\xd2\x01\xad\xeb\xbc\xc1\x29\xce\x14\xfe\x7d\x99\x0f\x88\x60\xea\x2c\x1d\x50\xcc\x3e\x85\x8c\x8e\x5c\x3a\x06\xc1\x3c\xe0\x87\x8c\x9c\xd2\xd8\xbd\x98\x75\x02\xd4\x70\xd0\x6c\x83\x61\xf1\xc0\xbe\xe7\x60\x66\xf0\xc1\x1c\xcc\x36\xfe\x8b\x00\x93\xa5\xde\xc2\x54\xb3\x9d\xc4\x35\x95\x29\x66\x3f\x6e\x20\xd4\x12\xeb\x86\xac\xef\xc8\x5e\x4c\xfa\xc1\x47\xa3\xf0\x92\x32\x08\x85\x00\x4d\x59\x2e\x1d\xbc\x25\x27\xe0\xb4\x41\xf2\xec\x53\x21\x21\x2c\xa5\x86\x75\x18\xcd\xe4\xfe\x0b\x20\x1b\xa0\x67\x5f\x2a\x01\x54\x48\xc6\xa5\x15\x6a\x78\xf6\x0e\x90\x0d\xd0\xd8\x40\x1b\x23\x21\x40\xfb\xbb\x12\x86\xf3\xd9\x8b\x02\xa0\x72\x62\xd6\xf2\x95\x64\x92\x84\xb0\x3d\xbd\x1e\x4a\x5d\xd7\x21\x9a\xc5\xef\x01\x56\xf7\x14\xf2\xfe\x0c\xeb\xe6\x1d\x40\xe1\x69\xde\x02\x01\x08\x7f\xfc\x5e\xf1\x93\x90\xb8\xd3\xbc\x5a\x58\xbb\x01\x3f\xaf\xc6\x14\xa8\x05\xca\x21\xfe\xfb\x6a\x64\x9f\x62\x31\x77\xe0\xb4\x1e\x38\x4d\x1c\x2e\x3b\xa0\xa3\xa4\xeb\xb7\x5b\xf0\xda\x9a\x1e\xa1\xde\x8b\xf4\xe8\x47\x7a\x04\x21\x68\x3c\x01\x26\x49\x7d\x82\x34\x0c\xb2\x79\xc4\x0f\xdc\xf4\xa4\x63\x3a\xbc\xa6\x87\x67\x94\x1e\x02\x69\x9a\x40\x2c\x93\x87\x0e\x00\x1f\xe1\x34\x46\x9c\xe5\x64\xe7\x16\xeb\xba\x95\x7e\x70\x38\xd1\x86\x13\x55\x61\xd0\x39\xed\x3f\x86\xd4\xbb\x66\x94\xdd\x53\xbd\x50\x28\x02\x9d\xd3\xcf\x71\x57\x00\x1a\xec\xf1\x5e\x74\x3f\xba\xc8\x7a\xf1\x2a\xaa\x17\x04\x51\x02\x09\xb4\x40\x50\x81\x10\x84\xb0\x3d\x50\x77\xd4\x7c\xa8\x99\x2f\x81\xe4\x38\x9e\x2c\xfc\x4e\x88\x17\x17\x32\x28\xb0\x25\x54\x01\xc1\x1f\x35\x69\x7e\x61\xd4\xcc\x6f\xd8\xa2\x8d\xa2\x27\x79\x2d\x2e\x35\x94\x79\x0a\x5b\x65\xb7\x26\x79\x03\xdf\x3c\x90\x40\x65\x79\x58\xaa\xc7\x55\x57\xcd\x10\x7a\x81\xa6\xc7\xe2\x42\x0e\x16\x99\x7b\xe6\xde\xf8\x49\x1d\xab\x2c\x98\x4d\x5d\x7b\xe3\x1b\x40\x0d\x09\x69\x1b\xaa\x34\x25\x26\x23\xcb\x71\x31\xfb\x1d\x80\x5d\x13\x92\x8d\x1f\x04\x2c\xb4\xdd\x05\xc3\x9c\xc5\x3a\x00\x46\x81\x1f\xcd\xe3\xed\x36\x4d\xc8\xcc\xa8\x41\x50\x00\x8f\x68\xab\xe5\x9e\xfc\x8c\xce\x33\x7b\x6d\x0c\x31\xdf\xc3\x3a\xf9\x70\x97\x10\x45\x43\x61\x4c\x57\x02\xb8\x9e\xf1\xe7\xc5\xbf\x7d\x40\x02\x24\x51\xe0\x51\x72\x5d\xe8\x65\xe7\xd1\x95\xa9\xb9\xfd\xb0\xe2\x9c\x54\xb9\xbb\x03\xf4\xc3\xc6\x00\xc1\xcb\x79\x7a\x9a\x09\x6a\x80\xfd\x2e\x67\x07\x28\x4c\x18\x90\x88\xcc\x07\x0a\x6a\xe2\x57\x14\x6f\x41\xe2\x5c\x65\xc6\x35\xcf\xe7\x73\xc5\x95\x78\x61\xa2\x9d\x9b\xcf\x85\x77\xa7\x53\xc8\x75\x76\xe2\x04\x23\x78\x8f\x5a\x43\x9a\x00\x1e\xdb\x9e\x34\x0a\x38\x2f\xdf\x13\x02\x42\x76\x3b\xbb\x9e\x80\xf4\x40\x12\x81\x5a\x10\xca\xdb\x9d\x35\xba\xbb\x40\x96\xc1\x24\x40\x4d\x0e\xba\x1b\x17\x84\x57\x4a\x9d\x74\x2f\xec\x08\x76\x06\x5b\x87\x8d\xe7\x67\x67\x04\x9e\x1b\xcf\xef\xd7\xad\x5c\xb1\xa1\xd0\x2c\xae\xe7\xab\x9d\x42\x56\x01\x01\xde\xa7\xee\xb2\xb7\xa8\x35\x39\xf9\xa0\x85\xf3\xdc\x07\x3d\x6d\x0a\xe2\x99\xeb\x2e\x5d\x8c\x29\x49\x11\xd9\x7e\x05\x1c\x35\x45\x6e\xd9\x4d\x0c\xd7\xe6\xc6\x48\x92\xd7\xc0\x78\x52\xab\xb9\x1f\xbf\x7f\x17\xf6\x2a\x15\xe0\x06\x17\xb4\xd0\x6c\x9b\x70\x8a\xfe\x38\xd0\x7a\x6e\x26\x9a\xc3\x32\xbf\xc5\x88\x69\x4f\xab\x9a\x8d\x4d\x47\x4d\x50\x7c\xdb\xe2\xe1\x71\xbc\x10\xf8\xe1\x9b\x1e\xe5\x7c\xec\x7b\xdc\x47\xfc\x46\x07\xfa\x9b\x80\x1f\x64\xd1\xe6\xd6\xb7\x29\x7e\x10\xe8\x03\x41\x1f\xc6\x40\x3b\x0e\x73\xee\xa1\x63\x15\xb7\xbe\xd9\xb9\xc2\xb0\x64\xfb\xee\x34\xa0\xbf\x6f\x04\x50\x03\x3f\x5a\x5f\xf3\x47\x91\x50\x28\x56\x1a\x7d\x0b\x8e\x56\xcc\x79\x2e\xdb\xed\x6b\x4d\xd1\x27\x0d\x02\x6d\x7c\xb4\xf5\x87\x21\x5f\x16\x7a\x40\xe0\x10\x7a\x88\xff\xa5\x4b\x25\x10\x95\xe1\xf1\x0c\x49\xf6\x5c\xe3\x9b\x4b\xaf\xc0\xed\x66\x44\x7c\x1c\x4f\x1e\x7a\xf1\xb7\x5d\x3f\xa7\x4d\x2d\xc3\xf7\x22\xb5\x48\x3a\x9e\xa0\x08\x5c\x0f\x0c\x26\xc1\xbe\xf0\xcc\xd0\x0b\xf7\xc8\x16\x10\xa0\x95\xbd\x3b\x80\x3e\xb0\xfd\x89\x22\x61\xca\xea\x26\xf6\xc7\xbc\xf5\x3d\xad\x9d\xae\x6e\xe2\x12\xd7\xb6\xe6\xe2\xb4\x45\xab\x90\xca\x55\xc7\xd6\xdf\xb7\x8c\x99\x1d\x0d\x47\xdd\x49\x51\x0f\x33\x6e\x6f\x6d\xe9\x6d\x37\x45\xcb\x83\xd0\xf3\x1a\x87\xd1\xdf\xc9\xa2\xa2\x57\x19\x0f\xaf\x43\xb6\x78\x15\xeb\x5c\xff\xbb\x0a\x1c\x75\xd3\xc0\x7f\x72\x13\x64\x1d\xff\x51\x6d\xfe\xdc\xc4\xb5\xaa\x44\xb9\x8c\x7c\xe2\x1f\x37\x64\x14\x88\xb4\x0c\x7c\x9a\xab\x35\x68\xcd\x2b\xdc\x7b\xe7\x62\x8b\x50\xfd\x83\xce\x53\x7f\xdb\xa2\xc8\x6c\x76\x6d\x3e\x5f\x9d\xbd\x57\x35\x36\x69\xe9\x58\x33\xb2\x94\xae\xcd\xbb\x2f\xf4\x81\x4e\xa2\x4f\x09\x9d\xd9\x18\x7d\x4a\x3c\x34\xda\x39\x9b\x35\x16\x6c\xf0\xa8\xa0\xf0\x8c\xee\x03\x9e\xae\xd4\x10\xff\x02\x00\x00\xff\xff\x6e\xab\x22\x72\xd4\x0c\x00\x00")

func dataMapTxtBytes() ([]byte, error) {
	return bindataRead(
		_dataMapTxt,
		"data/map.txt",
	)
}

func dataMapTxt() (*asset, error) {
	bytes, err := dataMapTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/map.txt", size: 3284, mode: os.FileMode(438), modTime: time.Unix(1442545152, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"data/map.txt": dataMapTxt,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"data": &bintree{nil, map[string]*bintree{
		"map.txt": &bintree{dataMapTxt, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
